<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[Git常用命令]]></title>
      <url>%2F2015%2F02%2F26%2FGit%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
      <content type="text"><![CDATA[首先，git是个好东西。看到这篇文章的也都明白。这篇只是针对新入门git的同学们，希望我踩的坑可以帮到更多的人。 git的概念：一个通过分支来进行多人协作的版本控制工具。 安装与配置 创建副本 本地git版本控制 查看文件状态 同步修改记录到index 将同步到index上的修改记录提交到本地仓库 将本地仓库推送到远程服务器 安装与配置 无论是Mac还是Linux还是Windows，我认为使用git最方便的还是命令。 安装过程不再赘述，自行Google或者百度。 安装完之后先执行以下命令： 1git config --list 这条命令的意思就是读取你的git配置文件，这个文件保存着你的个人信息和角色等方面的内容。 使用git config命令，你可以修改git的配置文件来实现git的客制化。 but，你首先得配置好你的用户昵称和你的邮箱，因为这些信息将会被引用到你之后提交的所有文件中。 执行以下命令，这条命令只能执行一次，因为git将一直使用该信息来处理你在git系统中所作的一切操作。 12git config --global user.namegit config --global user.email 如果你希望在一个特定的项目中使用不同的名称或邮箱地址，你可以在该项目中运行以下命令。 12git config user.namegit config user.email 创建副本 首先大家都知道要从远程服务器拉文件下来这里我们以一般的工作流程来举例 执行以下命令： 1git clone &lt;url&gt; -b dev 这条命令将在您的本地系统上创建dev分支，并从远程服务器将文件同步到本地的dev分支。 当我们执行git clone命令之后，我们的本地就相当于有了一个远程服务器所有文件的备份.git文件夹下大家可以简单理解为一部分由index组成，另一部分由本地仓库组成index存储你的本地文件与你WorkSpace的异同 到这一步，git的精髓才开始，贴一张图增强大家对git版本提交的印象。 本地git版本控制 查看文件状态当我们修改了我们的本地文件之后，我们可以执行以下命令： 1git status 这条命令用来查看我们的本地项目文件和我们的index的有什么异同。 同步修改记录到index如果发现有新的修改过的文件，并且我们确认这些修改都是正确的，执行以下命令： 1git add . 这里git add .是指我们将本地的文件修改记录全部同步到index之上。 如果要取消git add操作，请执行 1git rest HEAD` 上面的这条命令将会将你的index回滚到你上一次git add之前的状态 将同步到index上的修改记录提交到本地仓库这里我讲两种情况： github 模式执行以下命令： 1git commit -m &quot;本次提交说明&quot; git + gerrit模式（gerrit请自行了解）执行以下命令： 1git commit 不出所料的话会进入gerrit的提交信息编辑处 进入之后是以vim编辑模式进行commit信息编辑的 按i进入编辑模式，然后根据你们的git提交格式编辑好commit信息。 一般格式为： 123456789[Project Name]:本次提交的描述信息Product:项目对应产品BugID:如果是修改bug就填对应BugIDDescription:本次提交的具体描述Unit Test；单元测试结果 确认无误后按Esc退出编辑模式，然后输入:wq保存并退出 到这一步我们已经将本地做的文件修改同步到了我们的本地仓库 可以通过执行下面的命令来查看你本地的提交记录： 1git log 这里会将你所有的本地提交记录显示出来，包括你每次提交的changeID。 如果要取消git commit操作，请执行以下命令： git请执行: 1git reset &lt;要回滚的commitID&gt; git + gerrit请执行： 1git reset &lt;要回滚的changeID&gt; 将本地仓库推送到远程服务器 这里同样将github模式和git + gerrit模式分开讲： github模式执行以下命令： 1git push &lt;远程主机名&gt; &lt;本地分支名&gt; : &lt;远程分支名&gt; 一般为git push就可以，因为一般都会为自动追踪分支。 git + gerrit模式执行以下命令： 1git push origin HEAD:refs/for/dev 上面的命令表示将本地所有提交推送到远程dev分支 但是你提交的文件修改必须通过gerrit系统审核该项目的人Review，之后才可以Submit本次提交将你提交的改动merge到远程分支 另外： 如果要跳过gerrit代码Review请联系运维人员开启强推权限并执行以下命令： 1git push origin HEAD:refs/heads/dev 一般不要通过强推。 OK，以上只对我们日常经常使用的流程做了一个梳理，工作挺忙的，有空写一篇深入的介绍。 文中若有讲的不太对的地方还请留言指出，以免误人子弟。]]></content>
    </entry>

    
  
  
</search>
